// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTH & USERS ====================

model User {
  id              String    @id @default(uuid())
  walletAddress   String    @unique
  username        String?   @unique
  email           String?   @unique
  
  // Security
  encryptedSeed   String    // AES-GCM encrypted seed
  salt            String    // Salt for key derivation
  iv              String    // Initialization vector
  authTag         String    // Authentication tag for AES-GCM
  
  // Profile
  name            String?
  avatar          String?   // IPFS CID
  bio             String?
  
  // Status
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  lastLoginAt     DateTime?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  sessions        Session[]
  authLogs        AuthLog[]
  accounts        Account[]
  transactions    Transaction[]
  daos            DaoMember[]
  proposals       Proposal[]
  votes           Vote[]
  
  @@index([walletAddress])
  @@index([email])
  @@index([username])
}

model Session {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  token         String    @unique
  refreshToken  String?   @unique
  
  // Security
  ipAddress     String?
  userAgent     String?
  
  // Expiration
  expiresAt     DateTime
  lastActivity  DateTime  @default(now())
  
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([token])
}

model AuthLog {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  
  action      AuthAction
  success     Boolean
  ipAddress   String?
  userAgent   String?
  message     String?
  
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

enum AuthAction {
  LOGIN
  LOGOUT
  REGISTER
  SIGNATURE_VERIFY
  SESSION_REFRESH
  PASSWORD_CHANGE
}

// ==================== WALLET ====================

model Account {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  address         String    @unique
  name            String?
  derivationPath  String    // e.g., "//default", "//trading", etc.
  
  // Cached balances (updated via blockchain events)
  balanceBZR      Decimal   @default(0) @db.Decimal(20, 12)
  balanceLIVO     Decimal   @default(0) @db.Decimal(20, 12)
  
  isDefault       Boolean   @default(false)
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([address])
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Blockchain data
  blockHash       String?
  extrinsicHash   String?   @unique
  extrinsicIndex  String?
  
  // Transaction details
  from            String
  to              String
  amount          Decimal   @db.Decimal(20, 12)
  token           String    // "BZR" or "LIVO"
  
  status          TxStatus
  type            TxType
  
  // Metadata
  memo            String?
  metadata        Json?
  
  // Fees
  fee             Decimal?  @db.Decimal(20, 12)
  
  createdAt       DateTime  @default(now())
  confirmedAt     DateTime?
  
  @@index([userId])
  @@index([extrinsicHash])
  @@index([from])
  @@index([to])
  @@index([status])
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
  EXPIRED
}

enum TxType {
  TRANSFER
  PURCHASE
  CASHBACK
  DAO_CONTRIBUTION
  STAKING
  UNSTAKING
}

// ==================== DAOs ====================

model Dao {
  id              String    @id @default(cuid())
  onChainId       Int?      @unique // ID on blockchain
  
  name            String    @unique
  description     String
  avatar          String?   // IPFS CID
  cover           String?   // IPFS CID
  
  // Treasury
  treasuryAddress String    @unique
  treasuryBZR     Decimal   @default(0) @db.Decimal(20, 12)
  
  // Governance settings
  proposalThreshold   Decimal   @db.Decimal(20, 12)
  votingPeriod       Int       // blocks
  minQuorum          Decimal   @db.Decimal(5, 2) // percentage
  
  // Status
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  
  // Metadata
  metadata        Json?
  ipfsCid         String?   // Complete DAO data on IPFS
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  members         DaoMember[]
  proposals       Proposal[]
  products        Product[]
  services        ServiceOffering[]
  
  @@index([onChainId])
  @@index([name])
}

model DaoMember {
  id          String    @id @default(uuid())
  daoId       String
  dao         Dao       @relation(fields: [daoId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  role        DaoRole
  shares      Decimal   @default(1) @db.Decimal(20, 12)
  
  joinedAt    DateTime  @default(now())
  
  @@unique([daoId, userId])
  @@index([daoId])
  @@index([userId])
}

enum DaoRole {
  MEMBER
  MODERATOR
  ADMIN
  FOUNDER
}

// ==================== GOVERNANCE ====================

model Proposal {
  id              String    @id @default(cuid())
  daoId           String
  dao             Dao       @relation(fields: [daoId], references: [id])
  proposerId      String
  proposer        User      @relation(fields: [proposerId], references: [id])
  
  title           String
  description     String
  type            ProposalType
  
  // Voting
  startBlock      Int
  endBlock        Int
  
  votesFor        Decimal   @default(0) @db.Decimal(20, 12)
  votesAgainst    Decimal   @default(0) @db.Decimal(20, 12)
  votesAbstain    Decimal   @default(0) @db.Decimal(20, 12)
  
  status          ProposalStatus
  
  // On-chain reference
  onChainId       String?   @unique
  executionTx     String?
  
  // Metadata
  ipfsCid         String?
  metadata        Json?
  
  createdAt       DateTime  @default(now())
  executedAt      DateTime?
  
  // Relations
  votes           Vote[]
  
  @@index([daoId])
  @@index([proposerId])
  @@index([status])
}

enum ProposalType {
  MEMBERSHIP
  TREASURY_TRANSFER
  PARAMETER_CHANGE
  PRODUCT_LAUNCH
  SERVICE_OFFERING
  GENERAL
}

enum ProposalStatus {
  DRAFT
  ACTIVE
  PASSED
  REJECTED
  EXECUTED
  CANCELLED
}

model Vote {
  id          String    @id @default(uuid())
  proposalId  String
  proposal    Proposal  @relation(fields: [proposalId], references: [id])
  voterId     String
  voter       User      @relation(fields: [voterId], references: [id])
  
  vote        VoteChoice
  weight      Decimal   @db.Decimal(20, 12)
  reason      String?
  
  createdAt   DateTime  @default(now())
  
  @@unique([proposalId, voterId])
  @@index([proposalId])
  @@index([voterId])
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}

// ==================== MARKETPLACE ====================

model Category {
  id           String   @id            // slug Ãºnico (ex: "tecnologia-eletronicos-celulares")
  parentId     String?
  kind         String                 // "product" | "service"
  level        Int                    // 1..4
  
  namePt       String
  nameEn       String
  nameEs       String
  
  pathSlugs    String[] @db.Text      // ["tecnologia","eletronicos","celulares"]
  pathNamesPt  String[] @db.Text
  pathNamesEn  String[] @db.Text
  pathNamesEs  String[] @db.Text
  
  active       Boolean  @default(true)
  sort         Int      @default(0)
  
  // Relations
  products     Product[]
  services     ServiceOffering[]
  specs        CategorySpec[]
  
  @@index([kind, level])
  @@index([parentId])
  @@index([pathSlugs], type: Gin)
}

model CategorySpec {
  id            String   @id @default(cuid())
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  
  version       String               // semver (ex: "1.0.0")
  inheritsFrom  String?              // outro categoryId
  
  jsonSchema    Json
  uiSchema      Json
  indexHints    String[] @db.Text    // campos importantes para index
  
  createdAt     DateTime @default(now())
  
  @@index([categoryId])
}

model Product {
  id              String   @id @default(uuid())
  daoId           String
  dao             Dao      @relation(fields: [daoId], references: [id])
  
  title           String
  description     String?
  
  priceBzr        Decimal  @db.Decimal(20, 12)
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  categoryPath    String[] @db.Text
  
  // Dynamic attributes validated by CategorySpec
  attributes      Json
  attributesSpecVersion String
  
  // Media
  images          String[] @db.Text  // IPFS CIDs
  
  // Stock
  quantity        Int      @default(0)
  unlimited       Boolean  @default(false)
  
  // Status
  isActive        Boolean  @default(true)
  
  // IPFS
  cid             String   // Complete product data
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([isActive])
}

model ServiceOffering {
  id              String   @id @default(uuid())
  daoId           String
  dao             Dao      @relation(fields: [daoId], references: [id])
  
  title           String
  description     String?
  
  basePriceBzr    Decimal? @db.Decimal(20, 12) // null for quote-based
  priceType       PriceType
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  categoryPath    String[] @db.Text
  
  // Dynamic attributes
  attributes      Json
  attributesSpecVersion String
  
  // Availability
  schedule        Json?    // availability schedule
  maxBookings     Int?
  
  // Status
  isActive        Boolean  @default(true)
  
  // IPFS
  cid             String
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([isActive])
}

enum PriceType {
  FIXED
  HOURLY
  DAILY
  QUOTE
}

// ==================== NONCE TRACKING ====================

model UsedNonce {
  nonce       String   @id
  usedAt      DateTime @default(now())
  expiresAt   DateTime // Auto cleanup after expiration
  
  @@index([expiresAt])
}