version: '3.9'

services:
  # Web Application
  web:
    build:
      context: ../
      dockerfile: apps/web/Dockerfile
    container_name: bazari-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_URL:-https://api.bazari.io}
      - VITE_CHAIN_ENDPOINT=${CHAIN_ENDPOINT:-wss://chain.bazari.io}
      - VITE_IPFS_GATEWAY=${IPFS_GATEWAY:-https://ipfs.bazari.io}
    depends_on:
      - api
    networks:
      - bazari-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro

  # API Server
  api:
    build:
      context: ../
      dockerfile: apps/api/Dockerfile
    container_name: bazari-api
    restart: unless-stopped
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://bazari:${DB_PASSWORD}@postgres:5432/bazari_db
      - JWT_SECRET=${JWT_SECRET}
      - CHAIN_ENDPOINT=${CHAIN_ENDPOINT:-ws://chain:9944}
      - IPFS_API_URL=http://ipfs:5001
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ipfs:
        condition: service_started
    networks:
      - bazari-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bazari-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: bazari
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: bazari_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bazari-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bazari"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bazari-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - bazari-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # IPFS Node
  ipfs:
    image: ipfs/kubo:v0.24.0
    container_name: bazari-ipfs
    restart: unless-stopped
    environment:
      IPFS_PROFILE: server
      IPFS_PATH: /data/ipfs
    volumes:
      - ipfs_data:/data/ipfs
      - ./ipfs:/data/ipfs-config:ro
    networks:
      - bazari-network
    command: daemon --migrate=true --enable-namesys-pubsub

  # Substrate Chain Node
  chain:
    build:
      context: ../
      dockerfile: apps/bazari-chain/Dockerfile
    container_name: bazari-chain
    restart: unless-stopped
    ports:
      - "9944:9944"   # WebSocket RPC
      - "9933:9933"   # HTTP RPC
      - "30333:30333" # P2P
    volumes:
      - chain_data:/data
    networks:
      - bazari-network
    command: >
      --chain=/customSpec.json
      --base-path=/data
      --rpc-external
      --rpc-cors=all
      --rpc-methods=unsafe
      --ws-external
      --prometheus-external
      --telemetry-url="wss://telemetry.polkadot.io/submit 0"
      --name="Bazari-Production"

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: bazari-opensearch
    restart: unless-stopped
    environment:
      - cluster.name=bazari-cluster
      - node.name=bazari-node-1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - bazari-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bazari-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - bazari-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bazari-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - bazari-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bazari-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - bazari-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: bazari-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - bazari-network
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "while true; do
        pg_dump -h postgres -U bazari bazari_db > /backups/bazari_db_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name '*.sql' -mtime +7 -delete;
        sleep 86400;
      done"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  chain_data:
    driver: local
  opensearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bazari-network:
    driver: bridge
    name: bazari-network